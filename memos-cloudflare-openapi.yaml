openapi: 3.1.0
info:
  title: Memos Cloudflare Edition API
  version: 0.24.x
  description: |
    100% compatible REST API for the Memos note‑taking application, migrated to Cloudflare Workers + D1.
servers:
  - url: /api
paths:
  /auth/signin:
    post:
      summary: Sign in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthSignInRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSignInResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/signup:
    post:
      summary: First‑time signup (HOST)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthSignUpRequest'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSignInResponse'
  /user/me:
    get:
      summary: Current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user:
    get:
      summary: List users (admin)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: rowStatus
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/{id}:
    get:
      summary: Public user profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /memo:
    get:
      summary: List memos
      parameters:
        - in: query
          name: rowStatus
          schema: {type: string}
        - in: query
          name: creatorId
          schema: {type: integer}
        - in: query
          name: tag
          schema: {type: string}
        - in: query
          name: visibility
          schema: {type: string}
        - in: query
          name: limit
          schema: {type: integer}
        - in: query
          name: offset
          schema: {type: integer}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Memo'
    post:
      summary: Create memo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoCreate'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memo'
  /memo/{id}:
    get:
      summary: Get memo
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: integer}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memo'
    patch:
      summary: Update memo
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: integer}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memo'
    delete:
      summary: Delete memo
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: integer}
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
  /memo/stats:
    get:
      summary: Memo statistics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoStats'
  /memo/all:
    get:
      summary: Full dump (owner only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Memo'
  /tag:
    get:
      summary: List tags
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
    post:
      summary: Create tag
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
  /tag/{id}:
    delete:
      summary: Delete tag
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: integer}
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
  /resource/blob:
    post:
      summary: Upload attachment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    OK:
      type: object
      properties:
        message:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
    AuthSignInRequest:
      type: object
      required: [username, password]
      properties:
        username: {type: string}
        password: {type: string}
    AuthSignUpRequest:
      allOf:
        - $ref: '#/components/schemas/AuthSignInRequest'
        - type: object
          properties:
            email: {type: string}
    AuthSignInResponse:
      type: object
      properties:
        accessToken: {type: string}
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id: {type: integer}
        uid: {type: string}
        username: {type: string}
        role: {type: string}
        email: {type: string, nullable: true}
        avatarUrl: {type: string, nullable: true}
        createdTs: {type: integer}
        updatedTs: {type: integer}
    UserUpdate:
      type: object
      properties:
        email: {type: string}
        avatarUrl: {type: string}
    Memo:
      type: object
      properties:
        id: {type: integer}
        uid: {type: string}
        creatorId: {type: integer}
        content: {type: string}
        visibility: {type: string}
        rowStatus: {type: string}
        createdTs: {type: integer}
        updatedTs: {type: integer}
        resourceIdList:
          type: array
          items: {type: integer}
        tags:
          type: array
          items: {type: string}
    MemoCreate:
      type: object
      required: [content]
      properties:
        content: {type: string}
        visibility: {type: string}
        resourceIdList:
          type: array
          items: {type: integer}
    MemoUpdate:
      allOf:
        - $ref: '#/components/schemas/MemoCreate'
    MemoStats:
      type: object
      properties:
        total:
          type: integer
        dailyHistogram:
          type: array
          items:
            type: object
            properties:
              ts: {type: integer}
              count: {type: integer}
    Tag:
      type: object
      properties:
        id: {type: integer}
        name: {type: string}
        createdTs: {type: integer}
    TagCreate:
      type: object
      required: [name]
      properties:
        name: {type: string}
    Resource:
      type: object
      properties:
        id: {type: integer}
        uid: {type: string}
        filename: {type: string}
        mimeType: {type: string}
        size: {type: integer}
        externalUri: {type: string}
        createdTs: {type: integer}